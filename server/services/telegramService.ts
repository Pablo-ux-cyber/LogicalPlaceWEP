import TelegramBot from 'node-telegram-bot-api';
import { fetchCryptoPriceData } from './cryptoApi';
import { logToFile, logCryptoCheck, logError, logCheckSummary } from './loggerService';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–µ—á–∏
interface CandleData {
  time: number;
  open: number;
  high: number;
  low: number;
  close: number;
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
type TelegramChat = {
  chatId: number;
  firstName: string;
  lastName?: string;
  username?: string;
  subscribedAt: Date;
};

// –¢–∏–ø—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
type BuySignal = {
  symbol: string;
  price: number;
  time: Date;
  bbLowerDaily: number;
  bbLowerWeekly: number;
};

// ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
const TARGET_GROUP_CHAT_ID = process.env.TELEGRAM_TARGET_GROUP_ID || '@logicalplace';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '';
let bot: TelegramBot | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram-–±–æ—Ç–∞
 */
export function initTelegramBot() {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. Telegram-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
    return null;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º polling
    bot = new TelegramBot(token, { polling: true });
    console.log('Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, (msg: any) => {
      const chatId = msg.chat.id;
      const firstName = msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      if (bot) {
        bot.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É @logicalplace –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.`
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    bot.onText(/\/status/, (msg: any) => {
      const chatId = msg.chat.id;
      if (bot) {
        bot.sendMessage(
          chatId,
          `–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-100 –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏. –°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É @logicalplace.`
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    bot.onText(/\/help/, (msg: any) => {
      const chatId = msg.chat.id;
      if (bot) {
        bot.sendMessage(
          chatId,
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
        );
      }
    });

    return bot;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞:', error);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É
 */
export function sendBuySignal(signal: BuySignal) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª.');
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appBaseUrl = process.env.APP_URL || 'https://your-app-url.com';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
  const chartUrl = `${appBaseUrl}/?symbol=${signal.symbol}`;
  
  const message = `‚ú® <b>${signal.symbol}</b> | BUY SIGNAL ‚ú®

üìå Price: $${signal.price.toFixed(2)}
üìâ BB Daily: $${signal.bbLowerDaily.toFixed(2)}
üìâ BB Weekly: $${signal.bbLowerWeekly.toFixed(2)}

üîç <a href="${chartUrl}">View Chart</a>`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
  bot.sendMessage(TARGET_GROUP_CHAT_ID, message, { parse_mode: 'HTML' })
    .then(() => {
      console.log(`Buy signal for ${signal.symbol} sent to group ${TARGET_GROUP_CHAT_ID}`);
    })
    .catch((error: any) => {
      console.error(`Error sending message to group ${TARGET_GROUP_CHAT_ID}:`, error);
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
 */
export function sendTestMessage() {
  if (!bot) {
    console.warn('Telegram bot is not initialized. Cannot send test message.');
    return false;
  }

  // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –ø–æ Solana (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const isExampleSignal = true;
  
  if (isExampleSignal) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SOL
    const solExample: BuySignal = {
      symbol: 'SOL',
      price: 147.82,
      time: new Date(),
      bbLowerDaily: 138.25,
      bbLowerWeekly: 142.35
    };
    
    console.log('Sending SOL example signal');
    sendBuySignal(solExample);
    return true;
  } else {
    // –û–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üî¨ TEST MESSAGE üî¨
    
‚úÖ This is a test message to verify the bot is working.
‚úÖ If you can see this message, the bot is correctly configured and can send messages to the group.

üïô Time sent: ${new Date().toLocaleString()}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    return bot.sendMessage(TARGET_GROUP_CHAT_ID, message)
      .then(() => {
        console.log(`Test message sent to group ${TARGET_GROUP_CHAT_ID}`);
        return true;
      })
      .catch((error: any) => {
        console.error(`Error sending test message to group ${TARGET_GROUP_CHAT_ID}:`, error);
        return false;
      });
  }
}

/**
 * –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
 * @param data –ú–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π
 * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
 * @param multiplier –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0)
 */
function calculateBollingerBands(data: CandleData[], period: number = 20, multiplier: number = 2.0) {
  if (data.length < period) {
    console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${period}, –∏–º–µ–µ—Ç—Å—è ${data.length}.`);
    return [];
  }

  const result = [];

  for (let i = period - 1; i < data.length; i++) {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const periodData = data.slice(i - period + 1, i + 1);
    
    // –†–∞—Å—á–µ—Ç SMA (–ø—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    const sum = periodData.reduce((acc, candle) => acc + candle.close, 0);
    const sma = sum / period;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const squaredDiffs = periodData.map(candle => Math.pow(candle.close - sma, 2));
    const variance = squaredDiffs.reduce((acc, diff) => acc + diff, 0) / period;
    const stdDev = Math.sqrt(variance);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–∞–ª–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 
    // (—ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–ª–∏ –∏—Ö –æ—á–µ–Ω—å –º–∞–ª–æ)
    const minStdDevPercent = 0.01; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç SMA
    const minStdDev = Math.max(sma * minStdDevPercent, 0.001); // –ù–µ –º–µ–Ω–µ–µ 1% –æ—Ç SMA –∏–ª–∏ 0.001 –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    
    // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    let effectiveStdDev = stdDev;
    if (stdDev < minStdDev) {
      console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∑–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (${stdDev.toFixed(6)}) –¥–ª—è SMA=${sma.toFixed(2)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${minStdDev.toFixed(6)}.`);
      effectiveStdDev = minStdDev;
    }
    
    // –†–∞—Å—á–µ—Ç –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const upper = sma + (multiplier * effectiveStdDev);
    const lower = sma - (multiplier * effectiveStdDev);
    
    result.push({
      time: data[i].time,
      sma,
      upper,
      lower,
      stdDev,
      effectiveStdDev
    });
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 */
export async function checkBuySignals(cryptoSymbols: string[]) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return;
  }

  const message = `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${cryptoSymbols.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ...`;
  console.log(message);
  logToFile(message, 'checks');
  
  let successCount = 0;
  let errorCount = 0;
  let signalCount = 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const batchSize = 5; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞–∫–µ—Ç—ã
  for (let i = 0; i < cryptoSymbols.length; i += batchSize) {
    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç –º–æ–Ω–µ—Ç (–Ω–µ –±–æ–ª–µ–µ batchSize)
    const batch = cryptoSymbols.slice(i, i + batchSize);
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${Math.floor(i / batchSize) + 1}/${Math.ceil(cryptoSymbols.length / batchSize)} - ${batch.join(', ')}...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const batchPromises = batch.map(async (symbol) => {
      try {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${symbol}...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const weeklyData = await fetchCryptoPriceData(symbol, '1w');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const dailyData = await fetchCryptoPriceData(symbol, '1d');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (!weeklyData.candles.length || !dailyData.candles.length) {
          const noDataMessage = `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
          console.warn(noDataMessage);
          logError(symbol, noDataMessage);
          return { success: false, error: true, signal: false };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        const lastWeeklyCandle = weeklyData.candles[weeklyData.candles.length - 1];
        const lastDailyCandle = dailyData.candles[dailyData.candles.length - 1];
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        const weeklyBB = calculateBollingerBands(weeklyData.candles);
        const dailyBB = calculateBollingerBands(dailyData.candles);
        
        if (!weeklyBB.length || !dailyBB.length) {
          const noBBMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
          console.warn(noBBMessage);
          logError(symbol, noBBMessage);
          return { success: false, error: true, signal: false };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        const lastWeeklyBB = weeklyBB[weeklyBB.length - 1];
        const lastDailyBB = dailyBB[dailyBB.length - 1];
        
        // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–±–µ—Ä–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—á–∏, –æ–Ω–∞ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞)
        const currentPrice = lastDailyCandle.close;
        const bbLowerWeekly = lastWeeklyBB.lower;
        const bbLowerDaily = lastDailyBB.lower;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–π BB, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º PineScript –∫–æ–¥–µ:
        // entry_condition = source <= bb_lower_d and source <= bb_lower_w 
        // –û–±–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        const isPriceBelowDailyBB = currentPrice <= bbLowerDaily;
        const isPriceBelowWeeklyBB = currentPrice <= bbLowerWeekly;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`${symbol}: –¶–µ–Ω–∞ ${currentPrice.toFixed(4)} ${isPriceBelowDailyBB ? '<=' : '>'} BB Daily ${bbLowerDaily.toFixed(4)}, ${isPriceBelowWeeklyBB ? '<=' : '>'} BB Weekly ${bbLowerWeekly.toFixed(4)}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (lastWeeklyBB.stdDev < 0.001 || lastDailyBB.stdDev < 0.001) {
          console.log(`${symbol} - –û–¢–õ–ê–î–ö–ê –†–ê–°–ß–ï–¢–û–í: Daily: SMA=${lastDailyBB.sma.toFixed(4)}, StdDev=${lastDailyBB.stdDev.toFixed(6)}, EffStdDev=${lastDailyBB.effectiveStdDev?.toFixed(6) || 'N/A'}`);
          console.log(`${symbol} - –û–¢–õ–ê–î–ö–ê –†–ê–°–ß–ï–¢–û–í: Weekly: SMA=${lastWeeklyBB.sma.toFixed(4)}, StdDev=${lastWeeklyBB.stdDev.toFixed(6)}, EffStdDev=${lastWeeklyBB.effectiveStdDev?.toFixed(6) || 'N/A'}`);
        }
        
        // –°–∏–≥–Ω–∞–ª –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É - –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã
        const isBuySignal = isPriceBelowWeeklyBB;
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–µ
        logCryptoCheck(symbol, currentPrice, bbLowerWeekly, isBuySignal, bbLowerDaily);
        
        if (isBuySignal) {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
          const excludedCoins = [
            // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            'USDT', 'USDC', 'DAI', 'BUSD', 'TUSD', 'GUSD', 'USDD', 'USDP', 'FRAX', 'LUSD',
            // –í—Ä–∞–ø–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏
            'WBTC', 'WETH', 'WBNB', 'WAVAX', 'WMATIC', 'WFTM', 'WSOL', 'WTRX', 'WONE', 'WRUNE'
          ];
          
          // –¢–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
          const suspiciousPatterns = ['USD', 'wrapped', 'pegged', 'stable', 'cash'];
          
          if (excludedCoins.includes(symbol.toUpperCase())) {
            console.log(`–°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π`);
            return { success: true, error: false, signal: false };
          }
          
          if (suspiciousPatterns.some(pattern => symbol.toLowerCase().includes(pattern.toLowerCase()))) {
            console.log(`–°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è`);
            return { success: true, error: false, signal: false };
          }
          
          const signalMessage = `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${symbol}!`;
          console.log(signalMessage);
          logToFile(signalMessage, 'signals');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
          sendBuySignal({
            symbol,
            price: currentPrice,
            time: new Date(lastDailyCandle.time * 1000),
            bbLowerDaily,
            bbLowerWeekly
          });
          
          return { success: true, error: false, signal: true };
        }
        
        return { success: true, error: false, signal: false };
      } catch (error) {
        const errorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è ${symbol}: ${error}`;
        console.error(errorMessage);
        logError(symbol, String(error));
        return { success: false, error: true, signal: false };
      }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
    const batchResults = await Promise.all(batchPromises);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
    batchResults.forEach(result => {
      if (result.success) successCount++;
      if (result.error) errorCount++;
      if (result.signal) signalCount++;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API –∏ —Å–µ—Ä–≤–µ—Ä
    if (i + batchSize < cryptoSymbols.length) {
      console.log(`–ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  logCheckSummary(successCount, errorCount, signalCount);
}