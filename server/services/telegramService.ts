import TelegramBot from 'node-telegram-bot-api';
import { fetchCryptoPriceData } from './cryptoApi';
import { logToFile, logCryptoCheck, logError, logCheckSummary } from './loggerService';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–µ—á–∏
interface CandleData {
  time: number;
  open: number;
  high: number;
  low: number;
  close: number;
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
type TelegramChat = {
  chatId: number;
  firstName: string;
  lastName?: string;
  username?: string;
  subscribedAt: Date;
};

// –¢–∏–ø—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
type BuySignal = {
  symbol: string;
  price: number;
  time: Date;
  bbLowerDaily: number;
  bbLowerWeekly: number;
};

// ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
const TARGET_GROUP_CHAT_ID = process.env.TELEGRAM_TARGET_GROUP_ID || '@logicalplace';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '';
let bot: TelegramBot | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram-–±–æ—Ç–∞
 */
export function initTelegramBot() {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. Telegram-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
    return null;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º polling
    bot = new TelegramBot(token, { polling: true });
    console.log('Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, (msg: any) => {
      const chatId = msg.chat.id;
      const firstName = msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      if (bot) {
        bot.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É @logicalplace –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.`
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    bot.onText(/\/status/, (msg: any) => {
      const chatId = msg.chat.id;
      if (bot) {
        bot.sendMessage(
          chatId,
          `–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 69 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É @logicalplace.`
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    bot.onText(/\/help/, (msg: any) => {
      const chatId = msg.chat.id;
      if (bot) {
        bot.sendMessage(
          chatId,
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
        );
      }
    });

    return bot;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞:', error);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É
 */
export function sendBuySignal(signal: BuySignal) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª.');
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appBaseUrl = process.env.APP_URL || 'https://your-app-url.com';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
  const chartUrl = `${appBaseUrl}/?symbol=${signal.symbol}`;
  
  const message = `‚ú® <b>${signal.symbol}</b> | BUY SIGNAL ‚ú®

üìå Price: $${signal.price.toFixed(2)}
üìâ BB (1W): $${signal.bbLowerWeekly.toFixed(2)}

üîç <a href="${chartUrl}">View Chart</a>`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
  bot.sendMessage(TARGET_GROUP_CHAT_ID, message, { parse_mode: 'HTML' })
    .then(() => {
      console.log(`Buy signal for ${signal.symbol} sent to group ${TARGET_GROUP_CHAT_ID}`);
    })
    .catch((error: any) => {
      console.error(`Error sending message to group ${TARGET_GROUP_CHAT_ID}:`, error);
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
 */
export function sendTestMessage() {
  if (!bot) {
    console.warn('Telegram bot is not initialized. Cannot send test message.');
    return false;
  }

  // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  const isExampleSignal = false;
  
  if (isExampleSignal) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SOL
    const solExample: BuySignal = {
      symbol: 'SOL',
      price: 147.82,
      time: new Date(),
      bbLowerDaily: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
      bbLowerWeekly: 142.35
    };
    
    console.log('Sending SOL example signal');
    sendBuySignal(solExample);
    return true;
  } else {
    // –û–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üî¨ TEST MESSAGE üî¨
    
‚úÖ This is a test message to verify the bot is working.
‚úÖ If you can see this message, the bot is correctly configured and can send messages to the group.

üïô Time sent: ${new Date().toLocaleString()}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    return bot.sendMessage(TARGET_GROUP_CHAT_ID, message)
      .then(() => {
        console.log(`Test message sent to group ${TARGET_GROUP_CHAT_ID}`);
        return true;
      })
      .catch((error: any) => {
        console.error(`Error sending test message to group ${TARGET_GROUP_CHAT_ID}:`, error);
        return false;
      });
  }
}

/**
 * –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ PineScript
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–ª–∏–Ω–∞ = 20, –∏—Å—Ç–æ—á–Ω–∏–∫ = close, –º–Ω–æ–∂–∏—Ç–µ–ª—å = 2.0
 * –§–æ—Ä–º—É–ª–∞: basis = sma(close, 20), dev = mult * stdev(close, 20), lower = basis - dev
 */
function calculateBollingerBands(data: CandleData[], length: number = 20, mult: number = 2.0) {
  if (data.length < length) {
    console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${length}, –∏–º–µ–µ—Ç—Å—è ${data.length}.`);
    return [];
  }

  const result = [];

  for (let i = length - 1; i < data.length; i++) {
    // –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∫–∞–∫ –≤ PineScript: sma(close, length))
    const closePrices = [];
    for (let j = i - length + 1; j <= i; j++) {
      closePrices.push(data[j].close);
    }
    
    // –†–∞—Å—á–µ—Ç SMA (basis –≤ PineScript)
    const basis = closePrices.reduce((sum, price) => sum + price, 0) / length;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–∫–∞–∫ –≤ PineScript: stdev(close, length))
    const squaredDiffs = closePrices.map(price => Math.pow(price - basis, 2));
    const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / length; // PineScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç N, –Ω–µ N-1
    const stdev = Math.sqrt(variance);
    
    // –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (dev –≤ PineScript)
    const dev = mult * stdev;
    
    // –†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å (–∫–∞–∫ –≤ PineScript)
    const upper = basis + dev;
    const lower = basis - dev;
    
    result.push({
      time: data[i].time,
      sma: basis,
      upper,
      lower,
      stdDev: stdev,
      dev
    });
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 */
export async function checkBuySignals(cryptoSymbols: string[]) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return;
  }

  const message = `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${cryptoSymbols.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ...`;
  console.log(message);
  logToFile(message, 'checks');
  
  let successCount = 0;
  let errorCount = 0;
  let signalCount = 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const batchSize = 5; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞–∫–µ—Ç—ã
  for (let i = 0; i < cryptoSymbols.length; i += batchSize) {
    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç –º–æ–Ω–µ—Ç (–Ω–µ –±–æ–ª–µ–µ batchSize)
    const batch = cryptoSymbols.slice(i, i + batchSize);
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${Math.floor(i / batchSize) + 1}/${Math.ceil(cryptoSymbols.length / batchSize)} - ${batch.join(', ')}...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const batchPromises = batch.map(async (symbol) => {
      try {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${symbol}...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const weeklyData = await fetchCryptoPriceData(symbol, '1w');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (!weeklyData.candles.length) {
          const noDataMessage = `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
          console.warn(noDataMessage);
          logError(symbol, noDataMessage);
          return { success: false, error: true, signal: false };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const lastWeeklyCandle = weeklyData.candles[weeklyData.candles.length - 1];
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const weeklyBB = calculateBollingerBands(weeklyData.candles);
        
        if (!weeklyBB.length) {
          const noBBMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
          console.warn(noBBMessage);
          logError(symbol, noBBMessage);
          return { success: false, error: true, signal: false };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        const lastWeeklyBB = weeklyBB[weeklyBB.length - 1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É - —Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        const currentPrice = lastWeeklyCandle.close;
        const bbLowerWeekly = lastWeeklyBB.lower;
        
        // –°–∏–≥–Ω–∞–ª –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        const isBuySignal = currentPrice <= bbLowerWeekly;
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
        const lastCandle = weeklyData.candles[weeklyData.candles.length - 1];
        const candleDate = new Date(lastCandle.time * 1000);
        
        console.log(`[DEBUG] ${symbol} - –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: ${candleDate.toISOString()}`);
        console.log(`[DEBUG] ${symbol} - –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${currentPrice}`);
        console.log(`[DEBUG] ${symbol} - BB Lower: ${bbLowerWeekly.toFixed(2)}`);
        console.log(`[DEBUG] ${symbol} - SMA: ${lastWeeklyBB.sma.toFixed(2)}`);
        console.log(`[DEBUG] ${symbol} - StdDev: ${lastWeeklyBB.stdDev.toFixed(4)}`);
        
        if (isBuySignal) {
          console.log(`‚ö†Ô∏è ${symbol}: –¶–µ–Ω–∞ ${currentPrice} <= BB ${bbLowerWeekly.toFixed(2)} - –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£!`);
          logToFile(`‚ö†Ô∏è ${symbol}: –¶–µ–Ω–∞ ${currentPrice} <= BB ${bbLowerWeekly.toFixed(2)} - –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£!`, 'signals');
        } else {
          console.log(`${symbol}: –¶–µ–Ω–∞ ${currentPrice} > BB ${bbLowerWeekly.toFixed(2)}`);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        logCryptoCheck(symbol, currentPrice, bbLowerWeekly, isBuySignal);
        
        if (isBuySignal) {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
          const excludedCoins = [
            // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            'USDT', 'USDC', 'DAI', 'BUSD', 'TUSD', 'GUSD', 'USDD', 'USDP', 'FRAX', 'LUSD',
            // –í—Ä–∞–ø–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏
            'WBTC', 'WETH', 'WBNB', 'WAVAX', 'WMATIC', 'WFTM', 'WSOL', 'WTRX', 'WONE', 'WRUNE'
          ];
          
          // –¢–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
          const suspiciousPatterns = ['USD', 'wrapped', 'pegged', 'stable', 'cash'];
          
          if (excludedCoins.includes(symbol.toUpperCase())) {
            console.log(`–°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π`);
            return { success: true, error: false, signal: false };
          }
          
          if (suspiciousPatterns.some(pattern => symbol.toLowerCase().includes(pattern.toLowerCase()))) {
            console.log(`–°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è`);
            return { success: true, error: false, signal: false };
          }
          
          const signalMessage = `‚ö†Ô∏è –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${symbol}!`;
          console.log(signalMessage);
          logToFile(signalMessage, 'signals');
          
          // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
          // –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
          console.log(`[–û–¢–ö–õ–Æ–ß–ï–ù–û] –°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`);
          logToFile(`[–û–¢–ö–õ–Æ–ß–ï–ù–û] –°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`, 'signals');
          
          // sendBuySignal({
          //   symbol,
          //   price: currentPrice,
          //   time: new Date(lastWeeklyCandle.time * 1000),
          //   bbLowerDaily: 0,
          //   bbLowerWeekly
          // });
          
          return { success: true, error: false, signal: true };
        }
        
        return { success: true, error: false, signal: false };
      } catch (error) {
        const errorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è ${symbol}: ${error}`;
        console.error(errorMessage);
        logError(symbol, String(error));
        return { success: false, error: true, signal: false };
      }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
    const batchResults = await Promise.all(batchPromises);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
    batchResults.forEach(result => {
      if (result.success) successCount++;
      if (result.error) errorCount++;
      if (result.signal) signalCount++;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API –∏ —Å–µ—Ä–≤–µ—Ä
    if (i + batchSize < cryptoSymbols.length) {
      console.log(`–ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  logCheckSummary(successCount, errorCount, signalCount);
}