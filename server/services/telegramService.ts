import TelegramBot from 'node-telegram-bot-api';
import { fetchCryptoPriceData } from './cryptoApi';
import { logToFile, logCryptoCheck, logError, logCheckSummary } from './loggerService';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–µ—á–∏
interface CandleData {
  time: number;
  open: number;
  high: number;
  low: number;
  close: number;
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
type TelegramChat = {
  chatId: number;
  firstName: string;
  lastName?: string;
  username?: string;
  subscribedAt: Date;
};

// –¢–∏–ø—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
type BuySignal = {
  symbol: string;
  price: number;
  time: Date;
  bbLowerDaily: number;
  bbLowerWeekly: number;
};

// ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
const TARGET_GROUP_CHAT_ID = '@logicalplace';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '';
let bot: TelegramBot | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram-–±–æ—Ç–∞
 */
export function initTelegramBot() {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. Telegram-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
    return null;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º polling
    bot = new TelegramBot(token, { polling: true });
    console.log('Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, (msg: any) => {
      const chatId = msg.chat.id;
      const firstName = msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      bot.sendMessage(
        chatId,
        `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –≥—Ä—É–ø–ø—É @logicalplace –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.`
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    bot.onText(/\/status/, (msg: any) => {
      const chatId = msg.chat.id;
      bot.sendMessage(
        chatId,
        `–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-100 –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏. –°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É @logicalplace.`
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    bot.onText(/\/help/, (msg: any) => {
      const chatId = msg.chat.id;
      bot.sendMessage(
        chatId,
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
      );
    });

    return bot;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞:', error);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É
 */
export function sendBuySignal(signal: BuySignal) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª.');
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appBaseUrl = process.env.APP_URL || 'https://your-app-url.com';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
  const chartUrl = `${appBaseUrl}/?symbol=${signal.symbol}`;
  
  const message = `‚ú® <b>${signal.symbol}</b> | BUY SIGNAL ‚ú®

üìå Price: $${signal.price.toFixed(2)}
üìâ BB (1W): $${signal.bbLowerWeekly.toFixed(2)}

üîç <a href="${chartUrl}">View Chart</a>`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
  bot.sendMessage(TARGET_GROUP_CHAT_ID, message, { parse_mode: 'HTML' })
    .then(() => {
      console.log(`Buy signal for ${signal.symbol} sent to group ${TARGET_GROUP_CHAT_ID}`);
    })
    .catch((error: any) => {
      console.error(`Error sending message to group ${TARGET_GROUP_CHAT_ID}:`, error);
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
 */
export function sendTestMessage() {
  if (!bot) {
    console.warn('Telegram bot is not initialized. Cannot send test message.');
    return false;
  }

  // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –ø–æ Solana (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const isExampleSignal = true;
  
  if (isExampleSignal) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SOL
    const solExample: BuySignal = {
      symbol: 'SOL',
      price: 147.82,
      time: new Date(),
      bbLowerDaily: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
      bbLowerWeekly: 142.35
    };
    
    console.log('Sending SOL example signal');
    sendBuySignal(solExample);
    return true;
  } else {
    // –û–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üî¨ TEST MESSAGE üî¨
    
‚úÖ This is a test message to verify the bot is working.
‚úÖ If you can see this message, the bot is correctly configured and can send messages to the group.

üïô Time sent: ${new Date().toLocaleString()}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    return bot.sendMessage(TARGET_GROUP_CHAT_ID, message)
      .then(() => {
        console.log(`Test message sent to group ${TARGET_GROUP_CHAT_ID}`);
        return true;
      })
      .catch((error: any) => {
        console.error(`Error sending test message to group ${TARGET_GROUP_CHAT_ID}:`, error);
        return false;
      });
  }
}

/**
 * –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
 * @param data –ú–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π
 * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
 * @param multiplier –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0)
 */
function calculateBollingerBands(data: CandleData[], period: number = 20, multiplier: number = 2.0) {
  if (data.length < period) {
    console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${period}, –∏–º–µ–µ—Ç—Å—è ${data.length}.`);
    return [];
  }

  const result = [];

  for (let i = period - 1; i < data.length; i++) {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const periodData = data.slice(i - period + 1, i + 1);
    
    // –†–∞—Å—á–µ—Ç SMA (–ø—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    const sum = periodData.reduce((acc, candle) => acc + candle.close, 0);
    const sma = sum / period;
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const squaredDiffs = periodData.map(candle => Math.pow(candle.close - sma, 2));
    const variance = squaredDiffs.reduce((acc, diff) => acc + diff, 0) / period;
    const stdDev = Math.sqrt(variance);
    
    // –†–∞—Å—á–µ—Ç –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å
    const upper = sma + (multiplier * stdDev);
    const lower = sma - (multiplier * stdDev);
    
    result.push({
      time: data[i].time,
      sma,
      upper,
      lower,
      stdDev
    });
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 */
export async function checkBuySignals(cryptoSymbols: string[]) {
  if (!bot) {
    console.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return;
  }

  const message = `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${cryptoSymbols.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ...`;
  console.log(message);
  logToFile(message, 'checks');
  
  let successCount = 0;
  let errorCount = 0;
  let signalCount = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
  for (const symbol of cryptoSymbols) {
    try {
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${symbol}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const weeklyData = await fetchCryptoPriceData(symbol, '1w');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (!weeklyData.candles.length) {
        const noDataMessage = `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
        console.warn(noDataMessage);
        logError(symbol, noDataMessage);
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const lastWeeklyCandle = weeklyData.candles[weeklyData.candles.length - 1];
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const weeklyBB = calculateBollingerBands(weeklyData.candles);
      
      if (!weeklyBB.length) {
        const noBBMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è ${symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`;
        console.warn(noBBMessage);
        logError(symbol, noBBMessage);
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
      const lastWeeklyBB = weeklyBB[weeklyBB.length - 1];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É - —Ç–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
      const currentPrice = lastWeeklyCandle.close;
      const bbLowerWeekly = lastWeeklyBB.lower;
      
      // –°–∏–≥–Ω–∞–ª –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
      const isBuySignal = currentPrice <= bbLowerWeekly;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
      logCryptoCheck(symbol, currentPrice, bbLowerWeekly, isBuySignal);
      
      if (isBuySignal) {
        const signalMessage = `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è ${symbol}!`;
        console.log(signalMessage);
        logToFile(signalMessage, 'signals');
        signalCount++;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        sendBuySignal({
          symbol,
          price: currentPrice,
          time: new Date(lastWeeklyCandle.time * 1000),
          bbLowerDaily: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
          bbLowerWeekly
        });
      }
      
      successCount++;
    } catch (error) {
      errorCount++;
      const errorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è ${symbol}: ${error}`;
      console.error(errorMessage);
      logError(symbol, String(error));
    }
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  logCheckSummary(successCount, errorCount, signalCount);
}